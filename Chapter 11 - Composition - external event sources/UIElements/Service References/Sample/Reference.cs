//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FSharp.Windows.UIElements.Sample {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.w3schools.com/webservices/", ConfigurationName="Sample.TempConvertSoap")]
    public interface TempConvertSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.w3schools.com/webservices/FahrenheitToCelsius", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string FahrenheitToCelsius(string Fahrenheit);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.w3schools.com/webservices/FahrenheitToCelsius", ReplyAction="*")]
        System.IAsyncResult BeginFahrenheitToCelsius(string Fahrenheit, System.AsyncCallback callback, object asyncState);
        
        string EndFahrenheitToCelsius(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.w3schools.com/webservices/CelsiusToFahrenheit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CelsiusToFahrenheit(string Celsius);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.w3schools.com/webservices/CelsiusToFahrenheit", ReplyAction="*")]
        System.IAsyncResult BeginCelsiusToFahrenheit(string Celsius, System.AsyncCallback callback, object asyncState);
        
        string EndCelsiusToFahrenheit(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface TempConvertSoapChannel : FSharp.Windows.UIElements.Sample.TempConvertSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FahrenheitToCelsiusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FahrenheitToCelsiusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CelsiusToFahrenheitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CelsiusToFahrenheitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TempConvertSoapClient : System.ServiceModel.ClientBase<FSharp.Windows.UIElements.Sample.TempConvertSoap>, FSharp.Windows.UIElements.Sample.TempConvertSoap {
        
        private BeginOperationDelegate onBeginFahrenheitToCelsiusDelegate;
        
        private EndOperationDelegate onEndFahrenheitToCelsiusDelegate;
        
        private System.Threading.SendOrPostCallback onFahrenheitToCelsiusCompletedDelegate;
        
        private BeginOperationDelegate onBeginCelsiusToFahrenheitDelegate;
        
        private EndOperationDelegate onEndCelsiusToFahrenheitDelegate;
        
        private System.Threading.SendOrPostCallback onCelsiusToFahrenheitCompletedDelegate;
        
        public TempConvertSoapClient() {
        }
        
        public TempConvertSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TempConvertSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TempConvertSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TempConvertSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<FahrenheitToCelsiusCompletedEventArgs> FahrenheitToCelsiusCompleted;
        
        public event System.EventHandler<CelsiusToFahrenheitCompletedEventArgs> CelsiusToFahrenheitCompleted;
        
        public string FahrenheitToCelsius(string Fahrenheit) {
            return base.Channel.FahrenheitToCelsius(Fahrenheit);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFahrenheitToCelsius(string Fahrenheit, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFahrenheitToCelsius(Fahrenheit, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndFahrenheitToCelsius(System.IAsyncResult result) {
            return base.Channel.EndFahrenheitToCelsius(result);
        }
        
        private System.IAsyncResult OnBeginFahrenheitToCelsius(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Fahrenheit = ((string)(inValues[0]));
            return this.BeginFahrenheitToCelsius(Fahrenheit, callback, asyncState);
        }
        
        private object[] OnEndFahrenheitToCelsius(System.IAsyncResult result) {
            string retVal = this.EndFahrenheitToCelsius(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFahrenheitToCelsiusCompleted(object state) {
            if ((this.FahrenheitToCelsiusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FahrenheitToCelsiusCompleted(this, new FahrenheitToCelsiusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FahrenheitToCelsiusAsync(string Fahrenheit) {
            this.FahrenheitToCelsiusAsync(Fahrenheit, null);
        }
        
        public void FahrenheitToCelsiusAsync(string Fahrenheit, object userState) {
            if ((this.onBeginFahrenheitToCelsiusDelegate == null)) {
                this.onBeginFahrenheitToCelsiusDelegate = new BeginOperationDelegate(this.OnBeginFahrenheitToCelsius);
            }
            if ((this.onEndFahrenheitToCelsiusDelegate == null)) {
                this.onEndFahrenheitToCelsiusDelegate = new EndOperationDelegate(this.OnEndFahrenheitToCelsius);
            }
            if ((this.onFahrenheitToCelsiusCompletedDelegate == null)) {
                this.onFahrenheitToCelsiusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFahrenheitToCelsiusCompleted);
            }
            base.InvokeAsync(this.onBeginFahrenheitToCelsiusDelegate, new object[] {
                        Fahrenheit}, this.onEndFahrenheitToCelsiusDelegate, this.onFahrenheitToCelsiusCompletedDelegate, userState);
        }
        
        public string CelsiusToFahrenheit(string Celsius) {
            return base.Channel.CelsiusToFahrenheit(Celsius);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCelsiusToFahrenheit(string Celsius, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCelsiusToFahrenheit(Celsius, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndCelsiusToFahrenheit(System.IAsyncResult result) {
            return base.Channel.EndCelsiusToFahrenheit(result);
        }
        
        private System.IAsyncResult OnBeginCelsiusToFahrenheit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Celsius = ((string)(inValues[0]));
            return this.BeginCelsiusToFahrenheit(Celsius, callback, asyncState);
        }
        
        private object[] OnEndCelsiusToFahrenheit(System.IAsyncResult result) {
            string retVal = this.EndCelsiusToFahrenheit(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCelsiusToFahrenheitCompleted(object state) {
            if ((this.CelsiusToFahrenheitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CelsiusToFahrenheitCompleted(this, new CelsiusToFahrenheitCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CelsiusToFahrenheitAsync(string Celsius) {
            this.CelsiusToFahrenheitAsync(Celsius, null);
        }
        
        public void CelsiusToFahrenheitAsync(string Celsius, object userState) {
            if ((this.onBeginCelsiusToFahrenheitDelegate == null)) {
                this.onBeginCelsiusToFahrenheitDelegate = new BeginOperationDelegate(this.OnBeginCelsiusToFahrenheit);
            }
            if ((this.onEndCelsiusToFahrenheitDelegate == null)) {
                this.onEndCelsiusToFahrenheitDelegate = new EndOperationDelegate(this.OnEndCelsiusToFahrenheit);
            }
            if ((this.onCelsiusToFahrenheitCompletedDelegate == null)) {
                this.onCelsiusToFahrenheitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCelsiusToFahrenheitCompleted);
            }
            base.InvokeAsync(this.onBeginCelsiusToFahrenheitDelegate, new object[] {
                        Celsius}, this.onEndCelsiusToFahrenheitDelegate, this.onCelsiusToFahrenheitCompletedDelegate, userState);
        }
    }
}
